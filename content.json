[{"title":"elasticsearch更改mapping，不停服务重建索引","date":"2017-03-10T07:35:24.000Z","path":"2017/03/10/elasticsearch更改mapping，不停服务重建索引/","text":"Elasticsearch的mapping一旦创建，只能增加字段，而不能修改已经mapping的字段。但现实往往并非如此啊，有时增加一个字段，就好像打了一个补丁，一个可以，但是越补越多，最后自己都觉得惨不忍睹了。怎么办？？ 这里有一个方法修改mapping，那就是重新建立一个index，然后创建一个新的mapping。你可能会问，这要是在生产环境，可行吗？答案是，如果你一开始就采取了合适的设计，这个完全是可以做到平滑过渡的。 采取什么合理设计呢？就是我们的程序访问索引库时，始终使用同义词来访问，而不要使用真正的indexName。在reindex完数据之后，修改之前的同义词即可。 step1、创建一个索引，这个索引的名称最好带上版本号，比如my_index_v1,my_index_v2等。 step2、创建一个指向本索引的同义词。 ES代码 curl -XPOST localhost:9200/_aliases -d ' { \"actions\": [ { \"add\": { \"alias\": \"my_index\", \"index\": \"my_index_v1\" }} ] } 此时，你可以通过同义词my_index访问。包括创建索引，删除索引等。 step3，需求来了，需要更改mapping了，此时，你需要创建一个新的索引，比如名称叫my_index_v2（版本升级）.，在这个索引里面创建你新的mapping结构。然后，将新的数据刷入新的index里面。在刷数据的过程中，你可能想到直接从老的index中取出数据，然后更改一下格式即可。如何遍历所有的老的index数据，请参考这里。 step4，修改同义词。将指向v1的同义词，修改为指向v2。ES代码 curl -XPOST localhost:9200/_aliases -d ' { \"actions\": [ { \"remove\": { \"alias\": \"my_index\", \"index\": \"my_index_v1\" }}, { \"add\": { \"alias\": \"my_index\", \"index\": \"my_index_v2\" }} ] } step5，删除老的索引。 ES代码 curl -XDELETE localhost:9200/my_index_v1 除此之外，还有几个其他的方法也可以更改mapping。 1、修改程序，添加字段。 就是说，你可以在mapping中增加一个新的字段，然后你对新的字段进行访问统计搜索。这个就要修改两个地方，一个是修改mapping增加字段，还有就是修改你的程序，把字段改成新的字段。 2、更改字段类型为multi_field。 multi_field允许为一个字段设置多个数据类型。应用multi_field的一个最典型的场景是：一个类型定义为analyed，这个字段可以被搜索到，一个类型定义为不分词，这个字段用于排序。 任何字段都可以被更新为multi_field（类型为object和nested的类型除外）。假设现在有一个字段，名字叫created，类型现在为string。 ES代码 { \"created\": { \"type\": \"string\"} } 我们可以将它增加一种类型，使他既能被当做字符串又能当做日期型。 ES代码 curl -XPUT localhost:9200/my_index/my_type/_mapping -d ' { \"my_type\": { \"properties\": { \"created\": { \"type\": \"multi_field\", \"fields\": { \"created\": { \"type\": \"string\" }, \"date\": { \"type\": \"date\" } } } } } } 采用标准的重建索引方式的时候，我们推荐大家为每一个type都建立一个索引同义词，即便在同一个索引库中的多个type，也推荐使用建立一个同义词来访问。即一个index里面包含一个type，因为在elasticsearch中，跨index查询数据是很方便的。这样，我们就可以在reindex一个type后，立即将type生效，而不是将index下面所有的type都重建完后，同义词才能生效。","tags":[{"name":"ES","slug":"ES","permalink":"http://yoursite.com/tags/ES/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://yoursite.com/tags/elasticsearch/"}]},{"title":"是用JQuery获取对象的几种方式","date":"2017-03-10T07:35:24.000Z","path":"2017/03/10/使用JQuery获取对象的几种方式/","text":"1、先讲讲JQuery的概念 JQuery首先是由一个 America 的叫什么 John Resig的人创建的，后来又很多的JS高手也加入了这个团队。其实 JQuery是一个JavaScript的类库，这个类库集合了很多功能方法，利用类库你可以用简单的一些代码实现一些复杂的JS效果。 2、JQuery实现了 代码的分离不用再网页中加入如：onclick之类的事件来调用函数了，直接引入JQuery类库和自己编写的JQuery代码就可以了； JQuery代码 $(function(){ $(“Element”).click{function(){ alert(“点击我哦！”); } }})；上面的代码中 只要定义了Element 这个元素后面的click是动作alert(“点击我哦！”);这个是要执行的代码，当然你可以有很多的操作在这个函数中；这里面的$这个号代表JQuery的意思 ，就是引用类库了。。。我是这么理解的； 3、JQuery的核心的一些方法 each(callback) ‘就像循环 $(“Element”).length; ‘元素的个数，是个属性 $(“Element”).size(); ’也是元素的个数，不过带括号是个方法 $(“Element”).get(); ‘某个元素在页面中的集合，以数组的形式存储 $(“Element”).get(index); ’功能和上面的相同，index表示第几个元素，数组的下标 $(“Element”).get().reverse(); ‘把得到的数组方向 $(“Element1”).index($(“Element2”)); ’元素2在元素1中的索引值是。。。 4、基本对象获取(注意这里获取的都是Jquery对象而不是Dom对象哦，但是他俩是可以转换滴) $(“*”) ‘表示获取所有对象 但是我至今没这样用过 $(“#XXX”) ’获得 id=XXX 的元素对象（id可以是标签的id或CSS样式id） 常用 $(“input[name=’username’]”) 获得input标签中name=’userName’的元素对象 常用 $(“.abc”) ‘ 获得样式class的名字是.abc的元素对象 常用 $(“div”) ‘ 标签选择器 选择所有的div元素 常用 $(“#a,.b,span”) ‘表示获得ID是a的元素和使用了类样式b的元素以及所有的span元素 $(“#a .b p”) ‘ID号是a的并且使用了 b样式的 所有的p元素 5、层级元素获取 $(“Element1 Element2 Element3 ….”) ‘前面父级 后面是子集 $(“div &gt; p”) ‘获取div下面的所有的 p元素 $(“div + p”) ‘div元素后面的第一个 p元素 $(“div ~ p”) ‘div后面的所有的 p元素 6、简单对象获取 $(“Element:first”) ‘HTML页面中某类元素的第一个元素 $(“Element:last”) ‘HTML页面中某类元素的最后一个元素 $(“Element:not(selector)”) ‘去除所有与给定选择器匹配的元素,如：$(“input:not(:checked)”) 表示选择所有没有选中的复选框 $(“Element:even”) ‘获得偶数行 $(“Element:odd“）’获得奇数行 $(“Element:eq(index)”) ‘取得一个给定的索引值 $(“Element:gt(index)”) ‘取得给定索引值的元素 之后的所有元素 $(“Element:lt(index)”) ‘取得给定索引值的元素 之前的所有元素。。。 7、内容对象的获取和对象可见性 $(“Element:contains(text)”) ‘元素中是否包含text文本内容 $(‘Element:empty”) ‘获得元素不包含子元素或文本的 $(“Element:partnt”) ‘获得元素包含子元素或文本的 $(“Element:has(selector)”) ‘是否包含某个元素， 如：$(“p:has(span)”)表示所有包含span元素的p元素 $(“Element:hidden”) ‘选择所有可见元素 $(“Element:visible”) ‘选择所有不可见元素 8、其他对象获取方法 $(“Element[id]”) ‘所有带有ID属性的元素 $(“Element[attribute = youlika ]” ‘获得所有某个属性为youlika的元素 $(“Element[attribute != youlika ]” ‘获得所有某个属性为不是youlika的元素 $(“Element[attribute ^= youlika ]” ‘获得所有某个属性为不是youlika的开头的元素 $(“Element[attribute $= youlika ]” ‘获得所有某个属性为不是youlika的结尾的元素 $(“Element[attribute *= youlika ]” ‘获得所有某个属性包含youlika的开头的元素 $(“Element[selector1][selector2][….]”) ’符合属性选择器，比如$(“input[id][name][value=youlika ]”)表示获得带有ID、Name以及value是youlika 的input元素。 9、子元素的获取 $(“Element:nth-child(index)”) ‘选择父级下面的第n个元素 $(“Element:nth-child(even)”) ‘选择父级下面的偶数 $(“Element:nth-child(odd)”) ‘选择父级下面的奇数 $(“Element:nth-child(3n+1)”) ‘表达式 $(“Element:first-child”) ‘选择父级下面的第一个子元素 $(“Element:last-child”) ‘选择父级下面的最后一个子元素 $(“Element:only-child”) ‘匹配父级下的唯一的一个子级元素，例如dt在dl列表中唯一，那么将选择dt 10、表单对象获取 $(:input)//查找所有的Input元素，当然也包括下拉列表，文本域，单选框，复选框等。 $(:text)//匹配所有的单行文本框 $(:password)//匹配所有的密码框 $(:radio)//匹配所有的单选按钮 $(:checkbox)//匹配所有的复选框 $(:submit)//匹配所有的提交按钮 $(:image)//匹配所有的图像域，例如 &lt; input type=”image” /&gt; $(:reset)//匹配所有的重置按钮 $(:button)//匹配所有的按钮 $(:file)//匹配所有的文件上传域 $(:hidden)//匹配所有的不可见元素或者type为hidden的元素 $(:enabled)//匹配所有可用的input元素，比如radio:enabled表示匹配所有可用的单选按钮 $(:disabled)//匹配所有的不可用input元素，作用与上相反 $(:checked)//匹配所有选中的复选框元素 $(:selected)//匹配所有的下拉列表 11、元素属性的设置与移除 $(“Element”).attr(name) ‘取得第一个匹配的属性值，比如$(“img”).attr(“src”) $(“Element”.attr(key,value)”) ‘某一个元素设置属性 $(“Element”.attr({key:value,key1:value,….})) ‘为某个元素一次性设置多个属性 $(“Element”).attr(key,function) ‘为所有匹配的元素设置一个计算的属性值。 $(“Element”).removeAttr(name)//移除某一个属性","tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"},{"name":"web前端","slug":"web前端","permalink":"http://yoursite.com/tags/web前端/"}]},{"title":"SpringMVC @RequestBody接收Json对象字符串","date":"2017-02-24T10:35:24.000Z","path":"2017/02/24/SpringMVC @RequestBody接收Json对象字符串/","text":"以前，一直以为在SpringMVC环境中，@RequestBody接收的是一个Json对象，一直在调试代码都没有成功，后来发现，其实 @RequestBody接收的是一个Json对象的字符串，而不是一个Json对象。然而在ajax请求往往传的都是Json对象，后来发现用 JSON.stringify(data)的方式就能将对象变成字符串。同时ajax请求的时候也要指定dataType: “json”,contentType:”application/json” 这样就可以轻易的将一个对象或者List传到Java端，使用@RequestBody即可绑定对象或者List. JavaScript 代码： $(document).ready(function(){ var saveDataAry=[]; var data1={\"userName\":\"test\",\"address\":\"gz\"}; var data2={\"userName\":\"ququ\",\"address\":\"gr\"}; saveDataAry.push(data1); saveDataAry.push(data2); $.ajax({ type:\"POST\", url:\"user/saveUser\", dataType:\"json\", contentType:\"application/json\", data:JSON.stringify(saveData), success:function(data){ } }); }); Java代码 @RequestMapping(value = \"saveUser\", method = {RequestMethod.POST }}) @ResponseBody public void saveUser(@RequestBody List users) { userService.batchSave(users); }","tags":[{"name":"springMVC","slug":"springMVC","permalink":"http://yoursite.com/tags/springMVC/"}]},{"title":"Windows下安装ELK","date":"2017-02-24T10:35:24.000Z","path":"2017/02/24/Windows下安装ELK/","text":"安装java JDK 下载jdk，http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65-windows-x64.exe安装即可 配置JDK环境变量 右键我的电脑属性高级系统设置高级环境变量。在用户变量中新建Java_Home(如果已经存在，则忽略)，输入值为 jdk的安装目录 比如 C:\\Program Files\\Java\\jdk1.8.0_65(注意是32位还是64位，根据系统的版本确定)。在用户变量中新建 CLASSPATH (如果存在，则编辑)，输入%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar(如果存在，则忽略，注意字符前的 ; 符号)在系统变量中找到Path变量，进行编辑。在最后加上 %JAVA_HOME%\\bin (注意，如果已经存在，则忽略。另外，注意在字符前需要有 ; 符号，如果已经存在则忽略) 安装Elasticsearch 下载最新版的Elasticsearchhttps://www.elastic.co/downloads/elasticsearch解压安装包之后，执行 bin\\elasticsearch.bat打开 http://localhost:9200 测试是否安装成功 安装head插件 使用cmd命令： cd \\elasticsearch根目录\\bin\\在当前目录中执行 plugin install mobz/elasticsearch-head 命令 运行es服务，打开http://localhost:9200/_plugin/head/ 如过在线安装失败，可使用手动安装包 https://github.com/mobz/elasticsearch-head 运行安装命令：plugin install file:/path/to/my-plugin-1.2.1.zip 配置详解 下载完解开有三个包:bin是运行的脚本，config是设置文件，lib是放依赖的包。如果你要装插件的话就要多新建一个plugins的文件夹，把插件放到这个文件夹中。 elasticsearch的config文件夹里面有两个配置文 件：elasticsearch.yml和logging.yml，第一个是es的基本配置文件，第二个是日志配置文件，es也是使用log4j来记录日 志的，所以logging.yml里的设置按普通log4j配置文件来设置就行了。下面主要讲解下elasticsearch.yml这个文件中可配置的东西。 cluster.name: elasticsearch 配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。 node.name: “Franz Kafka” 节点名，默认随机指定一个name列表中名字，该列表在es的jar包中config文件夹里name.txt文件中 node.master: true 指定该节点是否有资格被选举成为node，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master。 node.data: true 指定该节点是否存储索引数据，默认为true。 index.number_of_shards: 5 设置默认索引分片个数，默认为5片。 index.number_of_replicas: 1 设置默认索引副本个数，默认为1个副本。 path.conf: /path/to/conf 设置配置文件的存储路径，默认是es根目录下的config文件夹。 path.data: /path/to/data 设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开，例：path.data: /path/to/data1,/path/to/data2 path.work: /path/to/work 设置临时文件的存储路径，默认是es根目录下的work文件夹。 path.logs: /path/to/logs 设置日志文件的存储路径，默认是es根目录下的logs文件夹 path.plugins: /path/to/plugins 设置插件的存放路径，默认是es根目录下的plugins文件夹 bootstrap.mlockall: true 设置为true来锁住内存。因为当jvm开始swapping时es的效率会降低，所以要保证它不swap，可以把ES_MIN_MEM和 ES_MAX_MEM两个环境变量设置成同一个值，并且保证机器有足够的内存分配给es。同时也要允许elasticsearch的进程可以锁住内 存，linux下可以通过ulimit -l unlimited命令。 network.bind_host: 192.168.0.1 设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0。 network.publish_host: 192.168.0.1 设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。 network.host: 192.168.0.1 这个参数是用来同时设置bind_host和publish_host上面两个参数。 transport.tcp.port: 9300 设置节点间交互的tcp端口，默认是9300。 transport.tcp.compress: true 设置是否压缩tcp传输时的数据，默认为false，不压缩。 http.port: 9200 设置对外服务的http端口，默认为9200。 http.max_content_length: 100mb 设置内容的最大容量，默认100mb http.enabled: false 是否使用http协议对外提供服务，默认为true，开启。 gateway.type: local gateway的类型，默认为local即为本地文件系统，可以设置为本地文件系统，分布式文件系统，hadoop的HDFS，和amazon的s3服务器,等方式 gateway.recover_after_nodes: 1 设置集群中N个节点启动时进行数据恢复，默认为1。 gateway.recover_after_time: 5m 设置初始化数据恢复进程的超时时间，默认是5分钟。 gateway.expected_nodes: 2 设置这个集群中节点的数量，默认为2，一旦这N个节点启动，就会立即进行数据恢复。 cluster.routing.allocation.node_initial_primaries_recoveries: 4 初始化数据恢复时，并发恢复线程的个数，默认为4。 cluster.routing.allocation.node_concurrent_recoveries: 2 添加删除节点或负载均衡时并发恢复线程的个数，默认为4。 indices.recovery.max_size_per_sec: 0 设置数据恢复时限制的带宽，如入100mb，默认为0，即无限制。 indices.recovery.concurrent_streams: 5 设置这个参数来限制从其它分片恢复数据时最大同时打开并发流的个数，默认为5。 discovery.zen.minimum_master_nodes: 1 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4） discovery.zen.ping.timeout: 3s 设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。 discovery.zen.ping.multicast.enabled: false 设置是否打开多播发现节点，默认是true。 discovery.zen.ping.unicast.hosts: [“host1”, “host2:port”, “host3[portX-portY]”] 设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。下面是一些查询时的慢日志参数设置 index.search.slowlog.level: TRACE index.search.slowlog.threshold.query.warn: 10s index.search.slowlog.threshold.query.info: 5s index.search.slowlog.threshold.query.debug: 2s index.search.slowlog.threshold.query.trace: 500ms index.search.slowlog.threshold.fetch.warn: 1s index.search.slowlog.threshold.fetch.info: 800ms index.search.slowlog.threshold.fetch.debug:500ms index.search.slowlog.threshold.fetch.trace: 200ms","tags":[{"name":"ES","slug":"ES","permalink":"http://yoursite.com/tags/ES/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://yoursite.com/tags/elasticsearch/"}]},{"title":"java foreach遍历的前提条件","date":"2017-02-24T10:35:24.000Z","path":"2017/02/24/java foreach遍历的前提条件/","text":"目的： 加深foreach遍历的影响 证明：foreach遍历的前提条件是：list !=null ,而不是：list !=null &amp;&amp; list.size() &gt;0 说明： jdk -version : 1.7 Java代码 public static void main(String[] args) { List list = null; // List list = new ArrayList(); for(String temp : list){ System.out.println(temp); } System.out.println(“over”);}现象：当list为null时，走到foreach语句时，会报空指针异常 当list =new ArrayList 时，未报任何异常 总结：list.size() &gt; 0不是foreach的必要前提条件，而list != null才是foreach的前提条件","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"mybatis中的那些细节","date":"2017-02-24T10:35:24.000Z","path":"2017/02/24/mybatis中的#和$的区别/","text":"mybatis中的#和$的区别 1.#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by “111”, 如果传入的值是id，则解析成的sql为order by “id”. 2.$将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order by user_id, 如果传入的值是id，则解析成的sql为order by id. 3.#方式能够很大程度防止sql注入,$方式无法防止Sql注入。 4.$方式一般用于传入数据库对象，例如传入表名.一般能用#的就别用$. 5.MyBatis排序时使用order by 动态参数时需要注意，用$而不是#","tags":[{"name":"mybatis","slug":"mybatis","permalink":"http://yoursite.com/tags/mybatis/"}]}]