[{"title":"SpringMVC @RequestBody接收Json对象字符串","date":"2017-02-24T10:35:24.000Z","path":"2017/02/24/SpringMVC @RequestBody接收Json对象字符串/","text":"#SpringMVC @RequestBody接收Json对象字符串#以前，一直以为在SpringMVC环境中，@RequestBody接收的是一个Json对象，一直在调试代码都没有成功，后来发现，其实 @RequestBody接收的是一个Json对象的字符串，而不是一个Json对象。然而在ajax请求往往传的都是Json对象，后来发现用 JSON.stringify(data)的方式就能将对象变成字符串。同时ajax请求的时候也要指定dataType: “json”,contentType:”application/json” 这样就可以轻易的将一个对象或者List传到Java端，使用@RequestBody即可绑定对象或者List. JavaScript 代码： $(document).ready(function(){ var saveDataAry=[]; var data1={\"userName\":\"test\",\"address\":\"gz\"}; var data2={\"userName\":\"ququ\",\"address\":\"gr\"}; saveDataAry.push(data1); saveDataAry.push(data2); $.ajax({ type:\"POST\", url:\"user/saveUser\", dataType:\"json\", contentType:\"application/json\", data:JSON.stringify(saveData), success:function(data){ } }); }); Java代码 @RequestMapping(value = \"saveUser\", method = {RequestMethod.POST }}) @ResponseBody public void saveUser(@RequestBody List users) { userService.batchSave(users); }","tags":[{"name":"springMVC","slug":"springMVC","permalink":"http://yoursite.com/tags/springMVC/"}]},{"title":"Windows下安装ELK","date":"2017-02-24T10:35:24.000Z","path":"2017/02/24/Windows下安装ELK/","text":"#安装java JDK# 下载jdk，http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65-windows-x64.exe安装即可 #配置JDK环境变量#右键我的电脑属性高级系统设置高级环境变量。在用户变量中新建Java_Home(如果已经存在，则忽略)，输入值为 jdk的安装目录 比如 C:\\Program Files\\Java\\jdk1.8.0_65(注意是32位还是64位，根据系统的版本确定)。在用户变量中新建 CLASSPATH (如果存在，则编辑)，输入%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar(如果存在，则忽略，注意字符前的 ; 符号)在系统变量中找到Path变量，进行编辑。在最后加上 %JAVA_HOME%\\bin (注意，如果已经存在，则忽略。另外，注意在字符前需要有 ; 符号，如果已经存在则忽略) #安装Elasticsearch# 下载最新版的Elasticsearchhttps://www.elastic.co/downloads/elasticsearch解压安装包之后，执行 bin\\elasticsearch.bat打开 http://localhost:9200 测试是否安装成功 #安装head插件# 使用cmd命令： cd \\elasticsearch根目录\\bin\\在当前目录中执行 plugin install mobz/elasticsearch-head 命令 运行es服务，打开http://localhost:9200/_plugin/head/ 如过在线安装失败，可使用手动安装包 https://github.com/mobz/elasticsearch-head 运行安装命令：plugin install file:/path/to/my-plugin-1.2.1.zip #配置详解#下载完解开有三个包:bin是运行的脚本，config是设置文件，lib是放依赖的包。如果你要装插件的话就要多新建一个plugins的文件夹，把插件放到这个文件夹中。 elasticsearch的config文件夹里面有两个配置文 件：elasticsearch.yml和logging.yml，第一个是es的基本配置文件，第二个是日志配置文件，es也是使用log4j来记录日 志的，所以logging.yml里的设置按普通log4j配置文件来设置就行了。下面主要讲解下elasticsearch.yml这个文件中可配置的东西。 cluster.name: elasticsearch 配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。 node.name: “Franz Kafka” 节点名，默认随机指定一个name列表中名字，该列表在es的jar包中config文件夹里name.txt文件中 node.master: true 指定该节点是否有资格被选举成为node，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master。 node.data: true 指定该节点是否存储索引数据，默认为true。 index.number_of_shards: 5 设置默认索引分片个数，默认为5片。 index.number_of_replicas: 1 设置默认索引副本个数，默认为1个副本。 path.conf: /path/to/conf 设置配置文件的存储路径，默认是es根目录下的config文件夹。 path.data: /path/to/data 设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开，例：path.data: /path/to/data1,/path/to/data2 path.work: /path/to/work 设置临时文件的存储路径，默认是es根目录下的work文件夹。 path.logs: /path/to/logs 设置日志文件的存储路径，默认是es根目录下的logs文件夹 path.plugins: /path/to/plugins 设置插件的存放路径，默认是es根目录下的plugins文件夹 bootstrap.mlockall: true 设置为true来锁住内存。因为当jvm开始swapping时es的效率会降低，所以要保证它不swap，可以把ES_MIN_MEM和 ES_MAX_MEM两个环境变量设置成同一个值，并且保证机器有足够的内存分配给es。同时也要允许elasticsearch的进程可以锁住内 存，linux下可以通过ulimit -l unlimited命令。 network.bind_host: 192.168.0.1 设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0。 network.publish_host: 192.168.0.1 设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。 network.host: 192.168.0.1 这个参数是用来同时设置bind_host和publish_host上面两个参数。 transport.tcp.port: 9300 设置节点间交互的tcp端口，默认是9300。 transport.tcp.compress: true 设置是否压缩tcp传输时的数据，默认为false，不压缩。 http.port: 9200 设置对外服务的http端口，默认为9200。 http.max_content_length: 100mb 设置内容的最大容量，默认100mb http.enabled: false 是否使用http协议对外提供服务，默认为true，开启。 gateway.type: local gateway的类型，默认为local即为本地文件系统，可以设置为本地文件系统，分布式文件系统，hadoop的HDFS，和amazon的s3服务器,等方式 gateway.recover_after_nodes: 1 设置集群中N个节点启动时进行数据恢复，默认为1。 gateway.recover_after_time: 5m 设置初始化数据恢复进程的超时时间，默认是5分钟。 gateway.expected_nodes: 2 设置这个集群中节点的数量，默认为2，一旦这N个节点启动，就会立即进行数据恢复。 cluster.routing.allocation.node_initial_primaries_recoveries: 4 初始化数据恢复时，并发恢复线程的个数，默认为4。 cluster.routing.allocation.node_concurrent_recoveries: 2 添加删除节点或负载均衡时并发恢复线程的个数，默认为4。 indices.recovery.max_size_per_sec: 0 设置数据恢复时限制的带宽，如入100mb，默认为0，即无限制。 indices.recovery.concurrent_streams: 5 设置这个参数来限制从其它分片恢复数据时最大同时打开并发流的个数，默认为5。 discovery.zen.minimum_master_nodes: 1 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4） discovery.zen.ping.timeout: 3s 设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。 discovery.zen.ping.multicast.enabled: false 设置是否打开多播发现节点，默认是true。 discovery.zen.ping.unicast.hosts: [“host1”, “host2:port”, “host3[portX-portY]”] 设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。下面是一些查询时的慢日志参数设置 index.search.slowlog.level: TRACE index.search.slowlog.threshold.query.warn: 10s index.search.slowlog.threshold.query.info: 5s index.search.slowlog.threshold.query.debug: 2s index.search.slowlog.threshold.query.trace: 500ms index.search.slowlog.threshold.fetch.warn: 1s index.search.slowlog.threshold.fetch.info: 800ms index.search.slowlog.threshold.fetch.debug:500ms index.search.slowlog.threshold.fetch.trace: 200ms","tags":[{"name":"ES","slug":"ES","permalink":"http://yoursite.com/tags/ES/"}]}]